/* ----------------------------------------------------------------------- *\
|
|				       CT
|
|				 Brian W Johnson
|		    Copyright (c) 1997; All rights reserved
|				   22-Aug-97
|
\* ----------------------------------------------------------------------- */

#include  <afx.h>
#include  <string.h>
#include  <stdio.h>
#include  <stdlib.h>
#include  <ctype.h>

#include  <cdiff.h>
#include  "fwild.h"

// #define  BUFFEREDOUT		// Define this to buffer stdout

/* ----------------------------------------------------------------------- */

char  *usagedoc [] =
{
"Usage:  ct  [%c?<nltw>] [T[ab]N]  file A  [file/path B] >output_file",
"",
"ct contrasts two files, listing the differences",
"If path A is wild, multiple file comparisons will be performed",
"If path B is a directory, the same filename is taken from file A",
"If path B is missing, the current directory is assumed",
"",
"ct returns an exit code as follows:",
"",
"     2  File not found, or parameter error",
"     1  Files do NOT match according to the options supplied",
"     0  Files DO match according to the options supplied",
"",
"    %ca        Lists only lines from file A",
"    %cb        Lists only lines from file B",
"    %cc        Include common code in the listing",
"    %cn        Lists line numbers",
"    %cL        Shows regions as \"A\" and \"B\" rather than filenames",
"    %cl        Does not consider leading  white space for match purposes",
"    %ct        Does not consider trailing white space for match purposes",
"    %cw        Does not consider any      white space for match purposes",
//??? "    %cT  N     Sets the tab interpretation size for both files",
//??? "    %cTa N     Sets the tab interpretation size for file A",
//??? "    %cTb N     Sets the tab interpretation size for file B",
"    %cv        Requests verbose output",
"    %cq        Does not list, but still sets the exit code",
"    %cz        Always returns a zero exit code, regardless of match",
"    %c?        Produces this help information",
"",
"Copyright (c) 1997 by Brian Johnson, Lucas TX - All Rights Reserved",
NULL
};

/* ----------------------------------------------------------------------- */

#define   FW_NORM      (FW_FILE | FW_DSTAR | FW_SUBD | FW_HIDDEN | FW_SYSTEM)

/* ----------------------------------------------------------------------- */

BOOL	a_flag = FALSE;			// TRUE to list file A components
BOOL	b_flag = FALSE;			// TRUE to list file B components
BOOL	c_flag = FALSE;			// TRUE to list common code in both files
BOOL	n_flag = FALSE;			// TRUE to list line numbers
BOOL	w_flag = FALSE;			// TRUE to exclude all      white space
BOOL	l_flag = FALSE;			// TRUE to exclude leading  white space
BOOL	t_flag = FALSE;			// TRUE to exclude trailing white space
BOOL	L_flag = TRUE;			// TRUE to list filenames instead of A, B
BOOL	v_flag = 0;			// Verbosity count
BOOL	q_flag = FALSE;			// TRUE to quietly set the exit code
BOOL	z_flag = FALSE;			// TRUE to always return a zero exit code

char   *fnpA   = NULL;			// Input file A name pointer
char   *fnpB   = NULL;			// Input file B name pointer

BOOL	Match  = FALSE;			// TRUE it the files match

int	exitcode = 0;			// Exit code - assume success

CDiff  Difference;			// The CDiff class instance

/* ----------------------------------------------------------------------- */

#define  SETEXIT(n)   {if (exitcode < (n)) exitcode = (n);}

extern	void	f_err    (char *);
extern	void	filepair (char *fnp1, char *fnp2);
extern	void	Contrast (void);
extern  void	List     (void);
extern	void	Prepare  (void);

/* ----------------------------------------------------------------------- */
    int
main (
    int    argc,			// Argument count
    char  *argv [])			// Argument list pointer

    {
    int    option;			// Option character
    long   ltemp;			// Used for optvalue()
    char  *fnp1;			// Ptr to the first pattern
    char  *fnp2;			// Ptr to the second pattern

static	char   *fargv [] = { "*" };	// Fake argv array
static	char   *optstring = "?aAbBcClLnNt:T:vVwWqQzZ";
//???    %cT  N     Sets the tab interpretation size for both files",
//???    %cTa N     Sets the tab interpretation size for file A",
//???    %cTb N     Sets the tab interpretation size for file B",


#ifdef  BUFFEREDOUT
    setbuf(stdout, fmalloc(BUFSIZ));
#endif
    optenv = getenv("CT");

    while ((option = getopt(argc, argv, optstring)) != EOF)
	{
	switch (tolower(option))
	    {
	    case 'a':
		a_flag = ! a_flag;
		break;

	    case 'b':
		b_flag = ! b_flag;
		break;

	    case 'c':
		c_flag = ! c_flag;
		break;

	    case 'n':
		n_flag = ! n_flag;
		break;

	    case 'l':
		if (option == 'l')
		    Difference.SetIgnoreLeadingBlanks(l_flag = ! l_flag);
		else // (option == 'L')
		    L_flag = ! L_flag;
		break;

	    case 't':
		if (option == 't')
		    Difference.SetIgnoreTrailingBlanks(t_flag = ! t_flag);
		else if (optvalue(optarg, &ltemp, 1, 21))
		    {
		    printf("Tab size parm error - %s\n", optvalerror());
		    usage();
		    }
		else // (valid tab size)
		    {
		    Difference.SetTabSize(0, (int)(ltemp));
		    Difference.SetTabSize(1, (int)(ltemp));
		    }
		break;

	    case 'v':
		++v_flag;
		break;

	    case 'w':
		Difference.SetIgnoreAllBlanks(w_flag = ! w_flag);
		break;

	    case 'q':
		q_flag = ! q_flag;
		break;

	    case 'z':
		z_flag = TRUE;
		break;

	    case '?':
		help();

	    default:
		usage();
	    }
	}


    if (a_flag  &&  b_flag)
	q_flag = TRUE;		// Can't list only both

    if (optind < argc)
	fnp1 = argv[optind++];
    else
	f_err("At least one pathname is required");

    if (optind < argc)
	fnp2 = argv[optind++];
    else
	fnp2 = ".";

    if (optind < argc)
	f_err("Only two pathnames are allowed");

    if (v_flag > 1)
	printf("Patterns:  %s  and  %s\n", fnp1, fnp2);

    filepair(fnp1, fnp2);

    if (v_flag > 0)
	printf("Returning %d\n", exitcode);
    return ((z_flag) ? (0) : (exitcode));
    }

/* ----------------------------------------------------------------------- */
    void			// Report a fatal error
f_err (char *s)			// Pointer to the message string

    {
    printf("\7%s\n", s);
    usage();
    }

/* ----------------------------------------------------------------------- */
    void
filepair (
    char  *fnp1,		// Ptr to the first  file pattern
    char  *fnp2)		// Ptr to the second file pattern

    {
    BOOL   ListFiles;		// TRUE to list filenames
    int    retval;		// Return from fp_init(), fp_pair()
    int    found = FALSE;	// TRUE if any pairs found
    void  *fp = NULL;		// Pointer to the FP structure


    ListFiles = (iswild(fnp1)  ||  ! fnchkfil(fnp1));
    if ((retval = fp_init(&fp, TRUE, fnp1, fnp2)) == 0)
	{
	while (fp_pair(fp, &fnpA, &fnpB) == 0)
	    {
	    if (ListFiles)
		{
		printf("%-30s  and  %s\n", fnpA, fnpB);
#ifdef  BUFFEREDOUT
		fflush(stdout);
#endif
		}

	    Contrast();
#ifdef  BUFFEREDOUT
	    fflush(stdout);
#endif
	    found = TRUE;
	    }
	if (found == FALSE)
	    cantfind(fnp1);
	}
    else
	{
	switch (retval)
	    {
	    case FPR_NOFILE:	f_err("Path 2 not found");        break;
	    case FPR_P2WILD:	f_err("Path 2 cannot be wild");   break;
	    case FPR_P2FILE:	f_err("Path 2 cannot be a file"); break;
	    case FPR_MEMORY:	f_err("Insufficient memory");     break;
	    case FPR_FWERROR:	f_err("fwild() error");           break;
	    default:		f_err("Unknown error");           break;
	    }
	}
    }

/* ----------------------------------------------------------------------- */
    void
Contrast (void)

    {
    if ( ! Difference.LoadFiles(fnpA, fnpB))
	{
	printf("%s\n", Difference.GetError());
	Difference.Reset();
	SETEXIT(2);
	return;
	}

    Match = Difference.GetFileMatch();
    if ( ! q_flag)
	{
	Prepare();
	List();
	}

    if ( ! Match)
	SETEXIT(1);
    Difference.Reset();
    }

/* ----------------------------------------------------------------------- */

FileDesc  LogicalFile = C;		// The logical file to be listed

char   CommonAB [_MAX_PATH] = {0};	// Common to both files
char   OnlyInA  [_MAX_PATH] = {0};	// Only  in file A header
char   OnlyInB  [_MAX_PATH] = {0};	// Only  in file B header
char   MovedInA [_MAX_PATH] = {0};	// Moved in file A header
char   MovedInB [_MAX_PATH] = {0};	// Moved in file B header
char   EndMsg   [_MAX_PATH] = {0};	// End of the listing

/* ----------------------------------------------------------------------- */
    void
Prepare (void)

    {
    sprintf(CommonAB, "\n******* Common\n");
    sprintf(OnlyInA,  "\n******* Only in  %s\n",  (L_flag) ? (fnpA) : "A");
    sprintf(OnlyInB,  "\n******* Only in  %s\n",  (L_flag) ? (fnpB) : "B");
    sprintf(MovedInA, "\n******* Moved in  %s\n", (L_flag) ? (fnpA) : "A");
    sprintf(MovedInB, "\n******* Moved in  %s\n", (L_flag) ? (fnpB) : "B");
    sprintf(EndMsg,   "\n******* End - ");

    LogicalFile = (a_flag) ? A : (b_flag) ? B : C;
    }

/* ----------------------------------------------------------------------- */
    BOOL
ShowHeader (
    RegType  Type)	// The region type

    {
    PSTR  s;		// Ptr to the string to be printed
    BOOL  Result = TRUE;// The returned result

    switch (Type)
	{
	default:			Result = FALSE;		break;
	case Common:	s = CommonAB;	Result = (c_flag);	break;
	case OnlyA:	s = OnlyInA;				break;
	case OnlyB:	s = OnlyInB;				break;
	case MovedA:	s = MovedInA;				break;
	case MovedB:	s = MovedInB;				break;
	}

    if (Result)
	puts(s);

    return (Result);
    }

/* ----------------------------------------------------------------------- */
    void
List (void)

    {
    int       LogicalLineNumber = 1;
    int       ActualLineNumber;
    BOOL      LinesPrinted = FALSE;
    BOOL      ListEnable;
    PSTR      pLine;
    RegType   Type;
    RegType   PrevType = (RegType)(-1);


    while ((pLine = Difference.GetTextLine (LogicalFile, LogicalLineNumber, &ActualLineNumber, &Type)) != NULL)
	{
	if (PrevType != Type)
	    ListEnable = ShowHeader(PrevType = Type);

	if (ListEnable)
	    {
	    if (n_flag)
		printf("%06u  ", ActualLineNumber);
	    puts(pLine);
	    LinesPrinted = TRUE;
	    }
	++LogicalLineNumber;
	}

    if (LinesPrinted)
	fputs(EndMsg, stdout);

    if (Match)
	printf("Files are identical\n");
    else
	printf("Files are different\n");
    }

/* --------------------------------- EOF --------------------------------- */
